server:
  port: 8091

management:
  endpoint:
    health:
      show-details: always
  endpoints.web:
    exposure:
      include: info, health, metrics, prometheus
    base-path: "/internal"
  metrics:
    export:
      prometheus:
        enabled: true
    web:
      server:
        request:
          autotime:
            enabled: true

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha

---
spring:
  config:
    activate:
      on-profile: test

no.nav.security.jwt:
  issuer:
    someshortname:
      discoveryurl: http://metadata
      accepted_audience: aud-localhost
      cookie_name: localhost-idtoken
    azuread:
      discoveryurl: http://metadata
      accepted_audience: aud-localhost
      cookie_name: localhost-idtoken

  client:
    registration:
      soknadsarkiverer:
        token-endpoint-url: http://localhost:8181/oauth2/v2.0/token
        grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
        scope: scope1
        authentication:
          client-id: testclient
          client-secret: testsecret
          client-auth-method: client_secret_basic

---
spring:
  config:
    activate:
      on-profile: default | dev | prod

no.nav.security.jwt:
  expirythreshold: ${EXPIRYTHRESHOLD} #threshold in minutes until token expires

  issuer.isso:
      discoveryurl: ${DISCOVERYURL}
      accepted_audience: ${ACCEPTEDAUDIENCE}
      cookie_name: ${COOKIENAME}
  issuer.azuread:
      discoveryurl: ${AZURE_WELL_KNOWN_URL}
      accepted_audience: ${ACCEPTEDAUDIENCE}, api://${ACCEPTEDAUDIENCE}
      proxyurl: http://webproxy-nais.nav.no:8088
      cookie_name: azure_token
  client:
    registration:
      soknadsarkiverer:
        token-endpoint-url: ${TOKENENDPOINTURL}
        grant-type: ${GRANTTYPE}
        scope: ${SCOPE}
        authentication:
          client-id: ${CLIENTID}
          client-secret: ${CLIENTSECRET}
          client-auth-method: ${CLIENTAUTHMETHOD}
